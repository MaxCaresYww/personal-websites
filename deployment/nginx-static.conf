# Nginx configuration for static files deployment
server {
    listen 80;
    listen [::]:80;
    server_name yourname.com www.yourname.com;

    # Redirect HTTP to HTTPS (will be automatically configured by certbot)
    # return 301 https://$server_name$request_uri;

    root /var/www/yourname.com;
    index index.html;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/x-javascript
        application/xml+rss
        application/javascript
        application/json
        application/xml
        application/xhtml+xml
        application/x-font-ttf
        application/vnd.ms-fontobject
        font/opentype
        image/svg+xml
        image/x-icon;
    gzip_disable "MSIE [1-6]\.";

    # Cache static assets
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|eot|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Handle Next.js routing
    location / {
        try_files $uri $uri.html $uri/ =404;
    }

    # Handle 404 errors
    error_page 404 /404.html;

    # Security: deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Prevent access to sensitive files
    location ~* \.(env|config|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Logging
    access_log /var/log/nginx/yourname.com.access.log;
    error_log /var/log/nginx/yourname.com.error.log;
}

# HTTPS configuration (will be added by certbot)
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name yourname.com www.yourname.com;
#
#     # SSL configuration will be managed by certbot
#     
#     # ... rest of the configuration same as above ...
# }